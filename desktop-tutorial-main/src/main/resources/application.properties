spring.datasource.url= pgjdbc:postgres://pdqgtlbbfbtsjg:703fbac83e0a07ae045efb0118274b8e1026d2a8b304be762f6068e972c48ff7@ec2-54-224-120-186.compute-1.amazonaws.com:5432/d9rl6gf0kg0a4g
spring.datasource.username= pdqgtlbbfbtsjg
spring.datasource.password= 703fbac83e0a07ae045efb0118274b8e1026d2a8b304be762f6068e972c48ff7
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



# App Properties
bezkoder.app.jwtSecret= bezKoderSecretKey
bezkoder.app.jwtExpirationMs= 86400000

spring.servlet.multipart.max-file-size=2MB
spring.servlet.multipart.max-request-size=2MB
#var port = process.env.PORT || 3000;
spring.jackson.serialization.fail-on-empty-beans=false
-Dserver.port=$PORT

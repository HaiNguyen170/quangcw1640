spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username= postgres
spring.datasource.password= postgres
spring.datasource.driver-class-name= org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.jpa.show-sql = true
spring.datasource.test-while-idle = true
spring.datasource.validation-query = select 1

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
hibernate.ddl-auto = create-drop

# Allows Hibernate to generate SQL optimized for a particular DBMS




# App Properties
bezkoder.app.jwtSecret= bezKoderSecretKey
bezkoder.app.jwtExpirationMs= 86400000

spring.servlet.multipart.max-file-size=2MB
spring.servlet.multipart.max-request-size=2MB
#var port = process.env.PORT || 3000;
spring.jackson.serialization.fail-on-empty-beans=false
-Dserver.port=$PORT
